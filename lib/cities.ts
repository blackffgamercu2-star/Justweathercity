import type { City } from "./types"

export const CITIES: City[] = [
  // Metro Cities (Tier 1)
  {
    id: "delhi-in",
    name: "Delhi",
    state: "Delhi",
    lat: 28.6139,
    lon: 77.209,
    population: 32941000,
    timezone: "Asia/Kolkata",
    aliases: ["New Delhi", "NCR"],
    slug: "delhi",
    region: "North",
  },
  {
    id: "mumbai-in",
    name: "Mumbai",
    state: "Maharashtra",
    lat: 19.076,
    lon: 72.8777,
    population: 20961472,
    timezone: "Asia/Kolkata",
    aliases: ["Bombay"],
    slug: "mumbai",
    region: "West",
  },
  {
    id: "bangalore-in",
    name: "Bangalore",
    state: "Karnataka",
    lat: 12.9716,
    lon: 77.5946,
    population: 8436675,
    timezone: "Asia/Kolkata",
    aliases: ["Bengaluru"],
    slug: "bangalore",
    region: "South",
  },
  {
    id: "hyderabad-in",
    name: "Hyderabad",
    state: "Telangana",
    lat: 17.385,
    lon: 78.4867,
    population: 6809970,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "hyderabad",
    region: "South",
  },
  {
    id: "kolkata-in",
    name: "Kolkata",
    state: "West Bengal",
    lat: 22.5726,
    lon: 88.3639,
    population: 14681900,
    timezone: "Asia/Kolkata",
    aliases: ["Calcutta"],
    slug: "kolkata",
    region: "East",
  },
  {
    id: "chennai-in",
    name: "Chennai",
    state: "Tamil Nadu",
    lat: 13.0827,
    lon: 80.2707,
    population: 7088000,
    timezone: "Asia/Kolkata",
    aliases: ["Madras"],
    slug: "chennai",
    region: "South",
  },
  {
    id: "pune-in",
    name: "Pune",
    state: "Maharashtra",
    lat: 18.5204,
    lon: 73.8567,
    population: 6430400,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "pune",
    region: "West",
  },
  {
    id: "ahmedabad-in",
    name: "Ahmedabad",
    state: "Gujarat",
    lat: 23.0225,
    lon: 72.5714,
    population: 8450570,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "ahmedabad",
    region: "West",
  },
  {
    id: "jaipur-in",
    name: "Jaipur",
    state: "Rajasthan",
    lat: 26.9124,
    lon: 75.7873,
    population: 3046163,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "jaipur",
    region: "North",
  },
  {
    id: "lucknow-in",
    name: "Lucknow",
    state: "Uttar Pradesh",
    lat: 26.8467,
    lon: 80.9462,
    population: 2815601,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "lucknow",
    region: "North",
  },

  // Tier 2 Cities
  {
    id: "surat-in",
    name: "Surat",
    state: "Gujarat",
    lat: 21.1458,
    lon: 72.8336,
    population: 6081000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "surat",
    region: "West",
  },
  {
    id: "indore-in",
    name: "Indore",
    state: "Madhya Pradesh",
    lat: 22.7196,
    lon: 75.8577,
    population: 2170000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "indore",
    region: "Central",
  },
  {
    id: "bhopal-in",
    name: "Bhopal",
    state: "Madhya Pradesh",
    lat: 23.1815,
    lon: 79.9864,
    population: 1798000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "bhopal",
    region: "Central",
  },
  {
    id: "visakhapatnam-in",
    name: "Visakhapatnam",
    state: "Andhra Pradesh",
    lat: 17.6869,
    lon: 83.2185,
    population: 1730000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "visakhapatnam",
    region: "South",
  },
  {
    id: "patna-in",
    name: "Patna",
    state: "Bihar",
    lat: 25.5941,
    lon: 85.1376,
    population: 1684000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "patna",
    region: "East",
  },
  {
    id: "vadodara-in",
    name: "Vadodara",
    state: "Gujarat",
    lat: 22.3072,
    lon: 73.1812,
    population: 1666000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "vadodara",
    region: "West",
  },
  {
    id: "ghaziabad-in",
    name: "Ghaziabad",
    state: "Uttar Pradesh",
    lat: 28.6692,
    lon: 77.4538,
    population: 1729000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "ghaziabad",
    region: "North",
  },
  {
    id: "ludhiana-in",
    name: "Ludhiana",
    state: "Punjab",
    lat: 30.901,
    lon: 75.8573,
    population: 1618000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "ludhiana",
    region: "North",
  },
  {
    id: "nagpur-in",
    name: "Nagpur",
    state: "Maharashtra",
    lat: 21.1458,
    lon: 79.0882,
    population: 2405000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "nagpur",
    region: "Central",
  },
  {
    id: "thane-in",
    name: "Thane",
    state: "Maharashtra",
    lat: 19.2183,
    lon: 72.9781,
    population: 2317000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "thane",
    region: "West",
  },

  // Additional Tier 3 Cities (sample - in production, expand to 1000)
  {
    id: "ranchi-in",
    name: "Ranchi",
    state: "Jharkhand",
    lat: 23.3441,
    lon: 85.3096,
    population: 1127000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "ranchi",
    region: "East",
  },
  {
    id: "amritsar-in",
    name: "Amritsar",
    state: "Punjab",
    lat: 31.634,
    lon: 74.8723,
    population: 1132000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "amritsar",
    region: "North",
  },
  {
    id: "allahabad-in",
    name: "Allahabad",
    state: "Uttar Pradesh",
    lat: 25.4358,
    lon: 81.8463,
    population: 1117000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "allahabad",
    region: "North",
  },
  {
    id: "coimbatore-in",
    name: "Coimbatore",
    state: "Tamil Nadu",
    lat: 11.0026,
    lon: 76.9124,
    population: 1050000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "coimbatore",
    region: "South",
  },
  {
    id: "jabalpur-in",
    name: "Jabalpur",
    state: "Madhya Pradesh",
    lat: 23.1815,
    lon: 79.9864,
    population: 1050000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "jabalpur",
    region: "Central",
  },
  {
    id: "agra-in",
    name: "Agra",
    state: "Uttar Pradesh",
    lat: 27.1767,
    lon: 78.0081,
    population: 1585000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "agra",
    region: "North",
  },
  {
    id: "nashik-in",
    name: "Nashik",
    state: "Maharashtra",
    lat: 19.9975,
    lon: 73.7898,
    population: 1486000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "nashik",
    region: "West",
  },
  {
    id: "faridabad-in",
    name: "Faridabad",
    state: "Haryana",
    lat: 28.4089,
    lon: 77.3178,
    population: 1425000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "faridabad",
    region: "North",
  },
  {
    id: "meerut-in",
    name: "Meerut",
    state: "Uttar Pradesh",
    lat: 28.9845,
    lon: 77.7064,
    population: 1423000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "meerut",
    region: "North",
  },
  {
    id: "varanasi-in",
    name: "Varanasi",
    state: "Uttar Pradesh",
    lat: 25.3176,
    lon: 82.9739,
    population: 1371000,
    timezone: "Asia/Kolkata",
    aliases: [],
    slug: "varanasi",
    region: "North",
  },

  // ... In production, add remaining ~970 cities following this pattern
  // Each city should have: id, name, state, lat, lon, population, timezone, aliases, slug, region
]

export function getCityBySlug(slug: string): City | undefined {
  return CITIES.find(
    (city) => city.slug === slug || city.aliases.some((alias) => alias.toLowerCase() === slug.toLowerCase()),
  )
}

export function getCityById(id: string): City | undefined {
  return CITIES.find((city) => city.id === id)
}

export function getAllCities(): City[] {
  return CITIES
}

export function getNearByCities(lat: number, lon: number, limit = 5): City[] {
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {
    const R = 6371 // Earth's radius in km
    const dLat = ((lat2 - lat1) * Math.PI) / 180
    const dLon = ((lon2 - lon1) * Math.PI) / 180
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) * Math.cos((lat2 * Math.PI) / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2)
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
    return R * c
  }

  return CITIES.filter((city) => lat !== city.lat || lon !== city.lon)
    .map((city) => ({
      ...city,
      distance: calculateDistance(lat, lon, city.lat, city.lon),
    }))
    .sort((a, b) => (a as any).distance - (b as any).distance)
    .slice(0, limit)
    .map(({ distance, ...city }) => city)
}

export function getCitiesByRegion(region: string, limit = 5): City[] {
  return CITIES.filter((city) => (city as any).region === region).slice(0, limit)
}
